TODO:

- 3 servicii pe ac network functionale          X
- comunicare prin request-uri
- verif ca merg
- ad serviciu pt management baza de date
- alte cerinte
- networkuri diferite si 1 cp cu 2 workeri
- deployat

- terraform, alte bonusuri


====================   Steps rulare Docker + Kubernetes application:  ===========================

1) pt fiecare serviciu trb sa creez imaginile de Docker(care sunt manageuite de K8)
cd your-auth-service
docker login -u your-dockerhub-username
docker build -t your-registry/your-auth-service:latest .
docker tag your-registry/your-auth-service:latest your-registry/your-auth-service:v1.0
docker push your-registry/your-auth-service:v1.0

docker tag local-image:tagname new-repo:tagname
docker push new-repo:tagname

2) Deploying on Kubernetes:
- Make sure you have a running Kubernetes cluster.
- Ensure that kubectl is configured to connect to your Kubernetes cluster.

3) Aplica conf de K8 pt fiecare serv:
Ex:
kubectl apply -f auth-service.yaml
kubectl apply -f auth-deployment.yaml

-> acum ar trb sa se porneasca aplicatia

4) Verif deployments:
kubectl get deployments
kubectl get pods
kubectl get services

5) Monitor Deployment:
kubectl get deployments
kubectl get pods
kubectl get services
Ensure that the desired number of replicas are running for each service.

6) Expose Services:
If your services are designed to be externally accessible, expose them using kubectl expose or create an Ingress resource. For example:
kubectl expose deployment auth-deployment --type=LoadBalancer --name=auth-service

7) Verify External Access:
kubectl get services
Access your services in a web browser or using other tools, using the provided external IP or hostname.

8) Debugging and Monitoring:
kubectl logs pod-name
kubectl describe pod pod-name

9). Scale or Update:
kubectl scale deployment auth-deployment --replicas=3
kubectl set image deployment/auth-deployment auth-container=new-image:tag


==============================================================

Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V-Tools-All -All

$Env:DOCKER_TLS_VERIFY = "1"
$Env:DOCKER_HOST = "tcp://172.24.243.89:2376"
$Env:DOCKER_CERT_PATH = "C:\Users\alexp.minikube\certs"
$Env:MINIKUBE_ACTIVE_DOCKERD = "cluster-multinod"

minikube delete -p cluster-multinod --All
Restart-Service vmms

& minikube -p cluster-multinod docker-env --shell powershell | Invoke-Expression
minikube -p cluster-multinod docker-env --shell powershell
minikube start --nodes 3 -p cluster-multinod
minikube start --nodes 3 --memory 4096 -p cluster-multinod
docker ps

kubectl config set-credentials cluster-multinod


docker login -u "myusername" -p "mypassword" docker.io
docker build -t phpmyadmin-personalizat .
docker tag auth:latest alex22docker/auth:latest                                                  
docker push alex22docker/auth:latest

kubectl apply -f phpmyadmin-deployment.yaml
kubectl apply -f phpmyadmin-service.yaml

Pornire cluster:
minikube start --nodes 3 -p cluster-multinod
Accesare servicii:
minikube service phpmyadmin-service -p cluster-multinod

kubectl create secret docker-registry auth-secret --docker-server=docker.io --docker-username=alex22docker --docker-password=CloudComp10! --docker-email=alexpostolache17@gmail.com